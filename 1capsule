#Создай собственный Шутер!
from random import randint
from pygame import *
from time import time as timer
#from time import *

font.init()
font1 = font.SysFont('Arial', 80)

win = font1.render('You win!$', True, (255, 215, 0))
lose = font1.render('You Suck!', True, (180, 0, 0))

font2 = font.SysFont('Arial', 40)

# '''музыка'''
# mixer.init()
# mixer.music.load('space.ogg')
# mixer.music.play()
# fire_sound = mixer.Sound('fire.ogg')

#шрифты и надписи
font.init()
font2 = font.SysFont('Arial', 36)

'''нам нужны такие картинки:'''
img_back = "galaxy.jpg" #фон игры

img_hero = "rocket.png" #герой

img_enemy = "ufo.png" #враг

img_bullet = "bullet.png"

img_ast = "asteroid.png"

score = 0 #сбито кораблей
lost = 0 #пропущенные корабли
max_lost = 10 #макс. пропущенных
goal = 5 #макс. уничтоженных
life = 3

''' класс-руководитель для других спрайтов'''
class GameSprite(sprite.Sprite):
    def __init__(self, player_image, player_x, player_y, size_x, size_y, player_speed):
        '''Вызываем конструктор класса (Sprite):'''
        sprite.Sprite.__init__(self)

        '''каждый спрайт должен хранить свойство image - изображение'''
        self.image = transform.scale(image.load(player_image), (size_x, size_y))
        self.speed = player_speed

        '''каждый спрайт должен хранить свойство rect - прямоугольник, в '''
        self.rect = self.image.get_rect()
        self.rect.x = player_x
        self.rect.y = player_y

    def reset(self):
        window.blit(self.image, (self.rect.x, self.rect.y))

'''класс главного игрока'''
class PLayer(GameSprite):
    def update(self):
        keys = key.get_pressed()
        if keys[K_LEFT] and self.rect.x > 5:
            self.rect.x -= self.speed
        if keys[K_RIGHT] and self.rect.x < win_width - 80:
            self.rect.x += self.speed
        # if keys[K_UP] and self.rect.y > 5:
        #     self.rect.y -= self.speed
        # if keys[K_DOWN] and self.rect.y < 395:
        #     self.rect.y += self.speed

    def fire(self):
        bullet = Bullet(img_bullet, self.rect.centerx, self.rect.top, 15, 20, -15)
        bullets.add(bullet)


class Enemy(GameSprite):
    #класс спрайта-противника
    def update(self):
        self.rect.y += self.speed
        global lost
        #исчезает,если доходит до конца
        if self.rect.y > win_height:
            self.rect.x = randint(80, win_width - 80)
            self.rect.y = 0
            lost = lost + 1

class Bullet(GameSprite):
    #класс спрайта-атака
    def update(self):
            self.rect.y += self.speed
            if self.rect.y < 0:
                self.kill()
'''создаём окошко'''

win_width = 700
win_height = 500
window = display.set_mode((700, 500))
display.set_caption("Шутер")

background = transform.scale(image.load("galaxy.jpg"), (700, 500))

'''создаём спрайты'''
ship = PLayer(img_hero, 5, win_height - 100, 80, 100, 10)

monsters = sprite.Group()
for i in range(1, 6):
    monster = Enemy(img_enemy, randint(80, win_width - 80), -40, 80, 50, randint(2, 3))
    monsters.add(monster)

bullets = sprite.Group()

asteroids = sprite.Group()
for i in range(1, 3):
    asteroid = Enemy(img_ast, randint(30, win_width - 30), -40, 80, 50, randint(1, 2))

    asteroids.add(asteroid)
'''переменная "игра окончена": как только там True, в основном цикле игра заканчивается"'''
finish = False
'''Основной цикл игры:'''
run = True 

rel_time = False

num_fire = 0

while run:
    #событие нажатия на кнопку Закрыть
    for e in event.get():
        if e.type == QUIT:
            run = False

        elif e.type == KEYDOWN:
            if e.key == K_SPACE:
                if num_fire < 5 and rel_time == False:
                    num_fire = num_fire + 1
                    ship.fire()

                if num_fire >= 5 and rel_time == False:
                    last_time = timer()
                    rel_time = True 
    
    if not finish:
        #обновляем фон
        window.blit(background, (0,0))

        #обновляем движение спрайтов
        ship.update()

        monsters.update()

        bullets.update()

        asteroid.update()

        #обновляем их в новом местоположении при каждой интерации цикла
        ship.reset()

        monsters.draw(window)

        bullets.draw(window)

        asteroids.draw(window)

        if rel_time == True:
            now_time = timer()

            if now_time - last_time < 3:
                reloud = font2.render("Relouding", 1, (150, 0, 0))
                window.blit(reloud, (260, 460))
            else:
                num_fire = 0
                rel_time = False

        collides = sprite.groupcollide(monsters, bullets, True, True)
        for c in collides:
            score = score + 1
            monster = Enemy(img_enemy, randint(80, win_width - 80), -40, 80, 50, randint(1, 5))
            monsters.add(monster)

            if sprite.spritecollide(ship, monsters, False) or sprite.spritecollide(ship, asteroids, False):
                sprite.spritecollide(ship, monsters, True)
                sprite.spritecollide(ship, asteroids, True)
                life = life - 1
            
        if life == 0 or lost >= max_lost:
            finish = True
            window.blit(lose, (200, 200))

        if sprite.spritecollide(ship, monsters, False) or lost >= max_lost:
            finish = True
            window.blit(lose, (200, 200))
        
        if score >= goal:
            finish = True
            window.blit(win, (200, 200))

        text = font2.render("Счёт: " + str(score), 1, (255, 255, 255))
        window.blit(text, (10, 20))

        text_lose = font2.render("Пропущено: " + str(lost), 1, (255, 255, 255))
        window.blit(text_lose, (10, 50))

    else:
        finish = False
        score = 0
        lost = 0
        for b in bullets:
            b.kill()
        for m in monsters:
            m.kill()

        # for i im range(5, -1, -1):
        #     s = font1.render
        
        
        time.delay(3000)
        for i in range(1, 6):
            monster = Enemy(img_enemy, randint(80, win_width - 80), -40, 80, 50, randint(1, 5))
            monsters.add(monster)

    display.update()
    #цикл сбрасывает каждые 0.05 секунд
    time.delay(15)
